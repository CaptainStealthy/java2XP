else if (strcmp(buf, "setLegs") == 0) {
					
					char command1[] = "setLegs";

					char donep[] = "SEND";
					XPLMSetDatab(legsCommand, &command1, 0, 20);

					/*recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);

					int legsNumber = stoi(buf);*/

					int taken = 0;

					/*while (legsNumber >= 1) {*/
					//sendto(s, donep, sizeof(donep), 0, (struct sockaddr*) &si_other, slen);
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(legsString, &buf, 0, 512);
					XPLMSetDatai(legsDelivered, 1);
					//taken = 0;
					//XPLMDebugString("DONE1"); XPLMDebugString("\n");

					//XPLMDebugString(buf); XPLMDebugString("\n");
					//legsNumber--;
					//}

					char setNull[] = "NULL";
					while (taken = XPLMGetDatai(legsControl) == 0) {
						//DO NOTHING AND WAIT FOR LUA TO TAKE DATAREF
					}
					taken = 0;
					XPLMSetDatai(legsControl, 0);
					XPLMSetDatai(legsDelivered, 0);
					XPLMSetDatab(legsCommand, &setNull, 0, 17);


				}
				else if (strcmp(buf, "resetLegsC") == 0) {
					legsActivated.clear();
				}
				else if (strcmp(buf, "legsDone") == 0) {
				XPLMSetDatai(legsCompleted, 1);
				}
				
				else if (strcmp(buf, "resetLegs") == 0) {
					char reset[] = "reset";
					XPLMSetDatab(legsCommand, &reset, 0, 17);
					while (strcmp(reset, "reset") == 0) {
						//int length = XPLMGetDatab(legsCommand, NULL, 0, 0);
						XPLMGetDatab(legsCommand, &reset, 0, sizeof(reset));
						//WAIT FOR RESET TO COMPLETE
					}
				}

				void startApp()

{
	
	legsCompleted = XPLMFindDataRef("mag787/udp/legs/completed");
	utilCommand = XPLMFindDataRef("aero787/utility/command");
	pdfDirectory = XPLMFindDataRef("mag787/efb/docs/pdfDir");
	pdfLoaded = XPLMFindDataRef("mag787/efb/docs/viewer/converted");
	command = XPLMFindDataRef("fmcCommand");
	panelState = XPLMFindDataRef("panelstate");
	title = XPLMFindDataRef("jLabel48");
	scratch = XPLMFindDataRef("scratch");
	left1A = XPLMFindDataRef("jLabel51");
	left1B = XPLMFindDataRef("jLabel52");
	 left2A = XPLMFindDataRef("jLabel49");
	 left2B = XPLMFindDataRef("jLabel50");
	  left3A = XPLMFindDataRef("jLabel54");
	  left3B = XPLMFindDataRef("jLabel53");
	  left4A = XPLMFindDataRef("jLabel55");
	  left4B = XPLMFindDataRef("jLabel56");
	  left5A = XPLMFindDataRef("jLabel58");
	  left5B = XPLMFindDataRef("jLabel59");
	  left6 = XPLMFindDataRef("jLabel60");
	  right1A = XPLMFindDataRef("jLabel61");
	  right1B = XPLMFindDataRef("jLabel62");
	  right2A = XPLMFindDataRef("jLabel63");
	  right2B = XPLMFindDataRef("jLabel64");
	  right3A = XPLMFindDataRef("jLabel65");
	  right3B= XPLMFindDataRef("jLabel66");
	  right4A = XPLMFindDataRef("jLabel67");
	  right4B = XPLMFindDataRef("jLabel68");
	  right5A = XPLMFindDataRef("jLabel69");
	  right5B = XPLMFindDataRef("jLabel70");
	  right6 = XPLMFindDataRef("jLabel57");
	  B1LS = XPLMFindDataRef("button1LEn");
	  B2LS = XPLMFindDataRef("button2LEn");
	  B3LS = XPLMFindDataRef("button3LEn");
	  B4LS = XPLMFindDataRef("button4LEn");
	  B5LS = XPLMFindDataRef("button5LEn");
	  B6LS = XPLMFindDataRef("button6LEn");
	  B1RS = XPLMFindDataRef("button1REn");
	  B2RS = XPLMFindDataRef("button2REn");
	  B3RS = XPLMFindDataRef("button3REn");
	  B4RS = XPLMFindDataRef("button4REn");
	  B5RS = XPLMFindDataRef("button5REn");
	  B6RS = XPLMFindDataRef("button6REn");
	  fuel = XPLMFindDataRef("sim/flightmodel/weight/m_fuel_total");
	  altitude = XPLMFindDataRef("sim/cockpit2/gauges/indicators/altitude_ft_pilot");
	  AmbientTempOAT = XPLMFindDataRef("sim/weather/temperature_ambient_c");
	  text1LEdit = XPLMFindDataRef("text1LEdit");
	  text2LEdit = XPLMFindDataRef("text2LEdit");
	  text3LEdit = XPLMFindDataRef("text3LEdit");
	  text4LEdit = XPLMFindDataRef("text4LEdit");
	  text5LEdit = XPLMFindDataRef("text5LEdit");
	  text1REdit = XPLMFindDataRef("text1REdit");
	  text2REdit = XPLMFindDataRef("text2REdit");
	  text3REdit = XPLMFindDataRef("text3REdit");
	  text4REdit = XPLMFindDataRef("text4REdit");
	  text5REdit = XPLMFindDataRef("text5REdit");
	  vSpeedsFont = XPLMFindDataRef("vSpeedsUplink");
	  efbDepIcao = XPLMFindDataRef("mag787/efb/efbDepICAO");
	  efbDepRunway = XPLMFindDataRef("mag787/efb/efbDepRwy");
	  efbDestIcao = XPLMFindDataRef("mag787/efb/efbDestICAO");
	  efbTakeOffWt = XPLMFindDataRef("mag787/efb/TOWt");
	  efbCG = XPLMFindDataRef("mag787/efb/efbCG");
	  efbRwyCond = XPLMFindDataRef("mag787/efb/runwayCond");
	  efbOat = XPLMFindDataRef("mag787/efb/efbOat");
	  efbSelTemp = XPLMFindDataRef("mag787/efb/efbSelTemp");
	  efbAntiIce = XPLMFindDataRef("mag787/efb/efbIceCond");
	  efbToFlaps = XPLMFindDataRef("mag787/efb/flaps");
	  efbToRtg = XPLMFindDataRef("mag787/efb/toDR");
	  efbWind = XPLMFindDataRef("mag787/efb/windDirection");
	  calcV1 = XPLMFindDataRef("mag787/calc/v1");
	  calcV2 = XPLMFindDataRef("mag787/calc/v2");
	  calcVr = XPLMFindDataRef("mag787/calc/vr");
	  calcN1 = XPLMFindDataRef("mag787/calc/n1");
	  calcTrim = XPLMFindDataRef("mag787/calc/stabTakeOff");
	  legsCommand = XPLMFindDataRef("mag787/udp/legsCommand");
	  legsString = XPLMFindDataRef("mag787/udp/legsString");
	  legsControl = XPLMFindDataRef("mag787/udp/legsControl");
	  legsDelivered = XPLMFindDataRef("mag787/udp/legsDelivered");
	  wptPlnFocus = XPLMFindDataRef("mag787/ND/plnFocus");
	  messageString = XPLMFindDataRef("mag787/udp/messageString");
	  messageCommand = XPLMFindDataRef("mag787/udp/messageCommand");
	  messageTaken = XPLMFindDataRef("mag787/udp/messageTaken");
	  rte1Act = XPLMFindDataRef("mag787/ND/rte1Act");
	  execOn = XPLMFindDataRef("execEn");
	  acftUnits = XPLMFindDataRef("mag787/settings/acftUnits");
	  

 

	 //Initialise winsock
	 XPLMDebugString("\nInitialising Winsock...\n");
	 SOCKET s;
	 struct sockaddr_in server, si_other,asyncReceiver;
	 int slen, recv_len;
	 char buf[BUFLEN];
	 WSADATA wsa;

	 slen = sizeof(si_other);

	 

	 
	
	

	


	 //Bind
	 



	 //startJVM();

	 XPLMDebugString("\n[787 UDP] JVM STARTED\n");

	 XPLMDebugString("[787 UDP] Bind done\n");
		while (quit == false)
		{
			try {

				
				recvfrom(s, buf, 1024, 0, (struct sockaddr *) &si_other, &slen);
				
				

				if (strcmp(buf, "returnCommand") == 0) {
					
					char temp[BUFLEN] = {};
					int send = XPLMGetDatab(command, NULL, 0, 0);
					XPLMGetDatab(command, &temp, 0, send);

					

					sendto(s, temp, 512, 0, (struct sockaddr*) &si_other, slen);

					//send = XPLMGetDatab(panelState, NULL, 0, 0);
					char temp1[BUFLEN] = {};
					char *ptr = temp1;
					send = XPLMGetDatab(panelState, NULL, 0, 0);
					XPLMGetDatab(panelState, ptr, 0, send);
					

					sendto(s, temp1, sizeof(temp1), 0, (struct sockaddr*) &si_other, slen);
					

				}
				if (strcmp(buf, "setScratch") == 0) {
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(scratch, &buf, 0, 17);
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(command, &buf, 0, 17);
				}
				else if (strcmp(buf, "returnScratch") == 0) {
					char temp1[BUFLEN] = {};
					int send = XPLMGetDatab(scratch, NULL, 0, 0);

					XPLMGetDatab(scratch, &temp1, 0, send);

					sendto(s, temp1, strlen(temp1), 0, (struct sockaddr*) &si_other, slen);
					//XPLMDebugString(buf);
				}
				else if (strcmp(buf, "setDisplay") == 0) {
				//	XPLMDebugString("[787 UDP] Setting Display\n");

					//RECEIVE B1 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B1LS, &buf, 0, 512);

					//RECEIVE B2 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B2LS, &buf, 0, 512);

					//RECEIVE B3 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B3LS, &buf, 0, 512);

					//RECEIVE B4 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B4LS, &buf, 0, 512);

					//RECEIVE B5 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B5LS, &buf, 0, 512);

					//RECEIVE B6 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B6LS, &buf, 0, 512);

					//RECEIVE B1 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B1RS, &buf, 0, 512);

					//RECEIVE B2 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B2RS, &buf, 0, 512);

					//RECEIVE B3 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B3RS, &buf, 0, 512);

					//RECEIVE B4 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B4RS, &buf, 0, 512);

					//RECEIVE B5 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B5RS, &buf, 0, 512);

					//RECEIVE B6 STATUS
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(B6RS, &buf, 0, 512);

					//RECEIVE TEXT1L EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text1LEdit, &buf, 0, 512);

					//RECEIVE TEXT2L EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text2LEdit, &buf, 0, 512);

					//RECEIVE TEXT3L EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text3LEdit, &buf, 0, 512);

					//RECEIVE TEXT4L EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text4LEdit, &buf, 0, 512);

					//RECEIVE TEXT5L EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text5LEdit, &buf, 0, 512);

					//RECEIVE TEXT1R EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text1REdit, &buf, 0, 512);

					//RECEIVE TEXT2R EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text2REdit, &buf, 0, 512);

					//RECEIVE TEXT3R EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text3REdit, &buf, 0, 512);

					//RECEIVE TEXT4R EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text4REdit, &buf, 0, 512);

					//RECEIVE TEXT5R EDIT
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(text5REdit, &buf, 0, 512);

					//Receive Title
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(title, &buf, 0, 512);


					//Receive line1A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left1A, &buf, 0, 512);

					//Receive line1B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left1B, &buf, 0, 1024);
					


					//Receive2A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left2A, &buf, 0, 512);

					//Receive 2B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left2B, &buf, 0, 1024);

					//Receive 3A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left3A, &buf, 0, 512);

					//Receive 3B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left3B, &buf, 0, 1024);

					//Receive 4A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left4A, &buf, 0, 512);

					//Receive 4B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left4B, &buf, 0, 1024);

					//Receive 5A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left5A, &buf, 0, 512);

					//Receive 5B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left5B, &buf, 0, 1024);

					//Receive 6
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(left6, &buf, 0, 50);

					///////RIGHT SECTION 

					//Receive 1A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right1A, &buf, 0, 512);

					//Receive 1B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right1B, &buf, 0, 512);

					//Receive 2A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right2A, &buf, 0, 512);

					//Receive 2B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right2B, &buf, 0, 512);


					//Receive 3A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right3A, &buf, 0, 512);

					//Receive 3B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right3B, &buf, 0, 512);

					//Receive 4A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right4A, &buf, 0, 512);

					//Receive 4B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right4B, &buf, 0, 512);

					//Receive 5A
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right5A, &buf, 0, 512);

					//Receive 5B
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right5B, &buf, 0, 512);

					//Receive 6
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(right6, &buf, 0, 512);

					
					//Reset Command
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(command, &buf, 0, 17);
					

					
					//Receive final PanelState
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(panelState, &buf, 0, 25);
					

				}
				else if (strstr(buf, "CDREF")) {
				vector<string> commandVector = split(std::string(buf), ",");
				DrefStore.add(commandVector);

				}
				else if (strstr(buf, "SDREF")) {
				vector<string> commandVector = split(std::string(buf), ",");
				DrefStore.set(commandVector);
				}
				else if (strstr(buf, "GDREF")) {
				vector<string> commandVector = split(std::string(buf), ",");
				string drefValue = DrefStore.get(commandVector.at(1));
				sendto(s, drefValue.c_str(), drefValue.size(), 0, (struct sockaddr*) &si_other, slen);
				}
				else if (strstr(buf, "RDREF")) {
				vector<string> commandVector = split(std::string(buf), ",");
				DrefStore.remove(commandVector.at(1));
				}
				else if (strcmp(buf, "GRAP,createBundle") == 0) {
				graphicsAPI.createBundle();
				}
				else if (strcmp(buf, "GRAP,endBundle") == 0) {
				graphicsAPI.endBundle();
				}
				else if (strstr(buf, "GRAP")) {
				vector<string> drawingMessage = split(std::string(buf), ",");
				graphicsAPI.addDrawCommand(drawingMessage.at(1));
				}
				else if (strcmp(buf, "returnTakeOffData") == 0) {
					//XPLMDebugString("\nSENDING TAKEOFF DATA \n");
					char temp[BUFLEN] = {};
					int send = XPLMGetDatab(efbTakeOffWt, NULL, 0, 0);
					XPLMGetDatab(efbTakeOffWt, &temp, 0, send);

					//sendData = std::string(temp, 0, send);
					sendto(s, temp,strlen(temp), 0, (struct sockaddr*) &si_other, slen);

					char temp1[BUFLEN] = {};
					send = XPLMGetDatab(efbOat, NULL, 0, 0);

					XPLMGetDatab(efbOat, &temp1, 0, send);

					sendto(s, temp1, sizeof(temp1), 0, (struct sockaddr*) &si_other, slen);

					char temp2[BUFLEN] = {};
					send = XPLMGetDatab(efbToFlaps, NULL, 0, 0);
					XPLMGetDatab(efbToFlaps, &temp2, 0, send);

					sendto(s, temp2, sizeof(temp2), 0, (struct sockaddr*) &si_other, slen);

					char temp3[BUFLEN] = {};
					send = XPLMGetDatab(efbRwyCond, NULL, 0, 0);
					XPLMGetDatab(efbRwyCond, &temp3, 0, send);

					sendto(s, temp3, sizeof(temp3), 0, (struct sockaddr*) &si_other, slen);

					char temp4[BUFLEN] = {};
					send = XPLMGetDataf(altitude);
					strcat(temp4, to_string(send).c_str());

					sendto(s, temp4, sizeof(temp4), 0, (struct sockaddr*) &si_other, slen);

					char temp5[BUFLEN] = {};
					send = XPLMGetDatab(efbWind, NULL, 0, 0);
					XPLMGetDatab(efbWind, &temp5, 0, send);

					sendto(s, temp5, sizeof(temp5), 0, (struct sockaddr*) &si_other, slen);

					char temp6[BUFLEN] = {};
					send = XPLMGetDatab(efbCG, NULL, 0, 0);
					XPLMGetDatab(efbCG, &temp6, 0, send);

					sendto(s, temp6, sizeof(temp6), 0, (struct sockaddr*) &si_other, slen);

					char temp7[BUFLEN] = {};
					send = XPLMGetDatab(efbSelTemp, NULL, 0, 0);
					XPLMGetDatab(efbSelTemp, &temp7, 0, send);

					sendto(s, temp7, sizeof(temp7), 0, (struct sockaddr*) &si_other, slen);

					char temp8[BUFLEN] = {};
					send = XPLMGetDatab(efbToRtg, NULL, 0, 0);
					XPLMGetDatab(efbToRtg, &temp8, 0, send);

					sendto(s, temp8, sizeof(temp8), 0, (struct sockaddr*) &si_other, slen);

					//Reset Command
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(command, &buf, 0, 17);




				}
				else if (strcmp(buf, "setTakeOffData") == 0) {
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(calcV1, &buf, 0, 512);

					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(calcVr, &buf, 0, 512);

					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(calcV2, &buf, 0, 512);

					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(calcN1, &buf, 0, 512);

					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(calcTrim, &buf, 0, 512);

					//Reset Command
					recvfrom(s, buf, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(command, &buf, 0, 17);

					XPLMSetDatai(utilCommand, 1);
				}
				else if (strcmp(buf, "returnPDF") == 0) {
					try {
						//XPLMDebugString("RETURNING PDF PATH\n");
						char dir[4096];
						int size1 = XPLMGetDatab(pdfDirectory, NULL, 0, 0);

						XPLMGetDatab(pdfDirectory, &buf, 0, sizeof(buf));

						
						
						sendto(s, buf, size1,0, (struct sockaddr*) &si_other,slen);
					}
					catch (exception e) {
						string message = e.what();
						message = message + "\n";
						XPLMDebugString(message.c_str());
					}

				}
				else if (strcmp(buf, "pdfLoaded") == 0) {
				XPLMDebugString("[787 UDP] PDF Succesfully Loaded\n");
					XPLMSetDatai(pdfLoaded, 1);
					XPLMSetDatab(command, (void *)"nothing", 0, 17);
				}
				
				else if (strcmp(buf, "addMessage") == 0) {
					//RECEIVE MESSAGE
					char temp1[BUFLEN * 4];


					char setMessage[] = "addMessage";
					XPLMSetDatab(messageCommand, &setMessage, 0, sizeof(setMessage));
					//sendto(s, setMessage, 24, 0, (struct sockaddr*) &si_other, slen);
					recvfrom(s, temp1, 512, 0, (struct sockaddr *) &si_other, &slen);
					XPLMSetDatab(messageString, &temp1, 0, 512 * 4);

					

					int taken = XPLMGetDatai(messageTaken);
					while (taken == 0) {
						taken = XPLMGetDatai(messageTaken);
						
					}
					//RESET MESSAGE TAKEN AFTER IT HAS BEEN TAKEN :) 
					XPLMSetDatai(messageTaken, 0);

					char reset[] = "done";
					XPLMSetDatab(command, &reset, 0, sizeof(reset));

				}

			}
			catch (exception e) {
				XPLMDebugString(e.what());
			}

			}
			
			
		XPLMDebugString("[787 UDP] Safe Exit from thread.\n");
		closesocket(s);
		WSACleanup();
		//std::terminate();
	


}